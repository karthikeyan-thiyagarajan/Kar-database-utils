package com.karthikeyan;import com.google.gson.Gson;import lombok.AllArgsConstructor;import org.apache.commons.lang3.exception.ExceptionUtils;import javax.persistence.EntityManager;import javax.persistence.Query;import javax.persistence.Tuple;import java.util.*;import static com.karthikeyan.QueryBuilder.Conditions.AND;import static com.karthikeyan.QueryBuilder.Operator.*;/** * @author Karthikeyan Thiyagarajan * Copyright (c) 2022 Comcast Corp * Created on 11/08/23 */public class QueryBuilder {    private static final String FAILURE = "FAILURE";   /* @PersistenceContext    private EntityManager em;*/    public static final String QUERY_IS_NOT_ADDED = "Query is not added";    public static final String WHERE = " WHERE 1=1 ";    static StringBuilder builder = null;    static QueryBuilder queryInstance = null;    boolean isQueryAdded;    public static QueryBuilder builder() {        queryInstance = new QueryBuilder();        if (builder == null) {            builder = new StringBuilder();        }        return queryInstance;    }    private static String getValues(String value) {        return "'" + value + "'";    }    public static void main(String[] args) {        String build = QueryBuilder.builder()                .query("SELECT * FROM Zeus_Dev.dbo.zeus_db_roles")                .equals(AND, "id", "0")                .build();        System.out.println("build = " + build);//        new QueryBuilder().executeNativeQueries(build, ZeusDbRoles.class);    }    public QueryBuilder query(String query) {        if (builder != null) {            builder.append(query).append(WHERE);            isQueryAdded = true;        }        return queryInstance;    }    /**     * Equals Core     */    private QueryBuilder coreEquals(Conditions conditions, String column, String value, Operator operator) {        if (!isQueryAdded) throw new KarDbException(QUERY_IS_NOT_ADDED);        builder.append(conditions.content).append(column).append(operator.content).append(getValues(value));        return queryInstance;    }    public QueryBuilder equals(Conditions conditions, String column, String value) {        return coreEquals(conditions, column, value, EQUALS);    }    public QueryBuilder greaterThan(Conditions conditions, String column, String value) {        return coreEquals(conditions, column, value, GREATER_THAN);    }    public QueryBuilder lessThan(Conditions conditions, String column, String value) {        return coreEquals(conditions, column, value, LESSER_THAN);    }    public QueryBuilder greaterThanOrEquals(Conditions conditions, String column, String value) {        return coreEquals(conditions, column, value, GREATER_THAN_EQUALS);    }    public QueryBuilder lessThanOrEquals(Conditions conditions, String column, String value) {        return coreEquals(conditions, column, value, LESSER_THAN_EQUALS);    }    public QueryBuilder notEquals(Conditions conditions, String column, String value) {        return coreEquals(conditions, column, value, NOT_EQUALS);    }    public QueryBuilder like(Conditions conditions, String column, String value) {        return coreEquals(conditions, column, value, LIKE);    }    public QueryBuilder notLike(Conditions conditions, String column, String value) {        return coreEquals(conditions, column, value, NOT_LIKE);    }    /**     * Between Core     */    private QueryBuilder betweenCore(Conditions conditions, String column, String from, String to, Operator operator) {        if (!isQueryAdded) throw new KarDbException(QUERY_IS_NOT_ADDED);        builder.append(conditions.content).append(column).append(operator.content).append(getValues(from)).append(AND).append(getValues(to));        return queryInstance;    }    public QueryBuilder between(Conditions conditions, String column, String from, String to) {        return betweenCore(conditions, column, from, to, BETWEEN);    }    public QueryBuilder notBetween(Conditions conditions, String column, String from, String to) {        return betweenCore(conditions, column, from, to, NOT_BETWEEN);    }    /**     * In Core     */    private QueryBuilder inCore(Conditions conditions, String column, Collection<?> values, Operator operator) {        String list = Arrays.toString(values.toArray()).replace("[", "(").replace("]", ")");        if (!isQueryAdded) throw new KarDbException(QUERY_IS_NOT_ADDED);        builder.append(conditions.content).append(column).append(operator.content).append(list);        return queryInstance;    }    public QueryBuilder in(Conditions conditions, String column, Collection<?> values) {        return inCore(conditions, column, values, IN);    }    public QueryBuilder notIn(Conditions conditions, String column, Collection<?> values) {        return inCore(conditions, column, values, NOT_IN);    }    /**     * In Core     */    private QueryBuilder nullCore(Conditions conditions, String column, Operator operator) {        if (!isQueryAdded) throw new KarDbException(QUERY_IS_NOT_ADDED);        builder.append(conditions.content).append(column).append(operator.content);        return queryInstance;    }    public QueryBuilder isNull(Conditions conditions, String column) {        return nullCore(conditions, column, NULL);    }    public QueryBuilder isNotNull(Conditions conditions, String column) {        return nullCore(conditions, column, NOT_NULL);    }    public String build() {        return builder.toString();    }    @AllArgsConstructor    public enum Conditions {        AND(" AND "), OR(" OR ");        final String content;    }    @AllArgsConstructor    public enum Operator {        NULL(" IS NULL "), NOT_NULL(" IS NOT NULL "), EQUALS(" = "), NOT_EQUALS(" != "), GREATER_THAN(" > "), LESSER_THAN(" < "), GREATER_THAN_EQUALS(" >= "), LESSER_THAN_EQUALS(" <= "), LIKE(" LIKE "), NOT_LIKE(" NOT LIKE "), BETWEEN(" BETWEEN "), NOT_BETWEEN(" NOT BETWEEN "), IN(" IN "), NOT_IN(" NOT IN ");        final String content;    }    public <T> List<T> executeNativeQueries(EntityManager em, String nativeQuery, Class<T> clazz) {        try {            Query query = em.createNativeQuery(nativeQuery, Tuple.class);            List<Tuple> resultList =  query.getResultList();            List<T> rowList = new ArrayList<>();            if (!resultList.isEmpty()) {                Gson gson = new Gson();                resultList.parallelStream().forEach(result -> {                    Map<String, Object> row = new HashMap<>();                    result.getElements().parallelStream().forEach(col -> row.put(col.getAlias(), String.valueOf(result.get(col))));                    rowList.add(gson.fromJson(gson.toJson(row), clazz));                });//                log.info("DB resultList size " + rowList.size());            }            return rowList;        } catch (Exception e) {            String rootCauseMessage = FAILURE + "-" + ExceptionUtils.getRootCauseMessage(e);            throw new KarDbException(rootCauseMessage);        }    }}